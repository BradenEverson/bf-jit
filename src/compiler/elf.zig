//! ELF File Format stuff

const std = @import("std");

const entry = [_]u8{
    0x7F, 0x45, 0x4C, 0x46,
    0x02, 0x01, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x02, 0x00, 0x3E, 0x00,
    0x01, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x40, 0x00, 0x38, 0x00,
    0x01, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x78, 0x00, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    // Program len
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    // Memory Size
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    0x00, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
};

/// The exit syscall
const exit = [_]u8{
    0x48, 0xC7, 0xC0, 0x3C,
    0x00, 0x00, 0x00, 0x48,
    0xC7, 0xC7, 0x2A, 0x00,
    0x00, 0x00, 0x0F, 0x05,
};

pub fn wrap_elf(program: []const u8, buf: *std.ArrayList(u8)) !void {
    var header = entry;
    // Program size is the 3rd to last word
    const program_size_idx = header.len - (3 * 8);
    // Memory size is the 2nd to last word
    const memory_size_idx = header.len - (3 * 8);
    const size: u64 = program.len + exit.len;

    for (0..8) |i| {
        header[program_size_idx + i] = @intCast((size >> @intCast(i * 8)));
        header[memory_size_idx + i] = @intCast((size >> @intCast(i * 8)));
    }

    _ = try buf.appendSlice(&header);
    _ = try buf.appendSlice(program);
    _ = try buf.appendSlice(&exit);
}
