//! ELF File Format stuff

const std = @import("std");

const entry = [_]u8{
    // E-IDENT
    0x7F, 0x45, 0x4C, 0x46,
    0x02, 0x01, 0x01, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    // EXEC
    0x02, 0x00,
    // MACHINE
    0x3E, 0x00,
    // VERSION
    0x01, 0x00, 0x00, 0x00,
    // ENTRY: 0x400078
    0x00, 0x10, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // HEADER SIZE
    0x40, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // SECTION HEADERS
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // E FLAGS
    0x00, 0x00, 0x00, 0x00,
    // E Size
    0x40, 0x00,
    // Program Header Size
    0x38, 0x00,
    // Program Header count
    0x02, 0x00,
    // e_shentsize
    0x00, 0x00,
    // e_shnum
    0x00, 0x00,
    // e_shstrndx
    0x00, 0x00,

    // Program Header 1 (code)
    0x01, 0x00, 0x00, 0x00,
    0x05, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x10, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // Program len
    0x69, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // Memory Size
    0xFF, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // Padding
    0x00, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,

    // Program Header 2 (Setup the 30,000 byte segment)
    0x01, 0x00, 0x00, 0x00,
    0x06, 0x00, 0x00, 0x00,
    // Offset
    0x00, 0x20, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // Start Address
    0x00, 0x20, 0x40, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // Padding
    0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // File Size
    0x30, 0x75, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // Mem size
    0x30, 0x75, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
    // Align
    0x00, 0x10, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
};

/// The exit syscall
const exit = [_]u8{ 0xB8, 0x3C, 0x00, 0x00, 0x00, 0xBF, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x05 };

pub fn wrap_elf(program: []const u8, buf: *std.ArrayList(u8)) !void {
    var header = entry;

    const code_size = program.len + exit.len;

    const code_size_offset = 0x40 + 32;
    const code_mem_size_offset = 0x40 + 40;

    for (0..8) |i| {
        header[code_size_offset + i] = @intCast((code_size >> @intCast(i * 8)) & 0xFF);
        header[code_mem_size_offset + i] = @intCast((code_size >> @intCast(i * 8)) & 0xFF);
    }

    try buf.appendSlice(&header);

    const header_end = 0x40 + (2 * 0x38);
    try buf.appendNTimes(0, 0x1000 - header_end);

    try buf.appendSlice(program);
    try buf.appendSlice(&exit);

    const code_end = 0x1000 + code_size;
    try buf.appendNTimes(0, 0x2000 - code_end);

    try buf.appendNTimes(66, 30000);
}
